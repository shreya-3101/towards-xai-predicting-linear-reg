# -*- coding: utf-8 -*-
"""LinearReg

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oemS7zoGZGWMnIU_3mQgZs0eKVK9JgEM
"""

!pip install shap

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.feature_selection import SelectKBest, f_regression, f_classif
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import shap

iris_dataset = load_iris()

# print(iris_dataset)

X = iris_dataset.data
Y = iris_dataset.target
# print(X,Y)

standardize = StandardScaler()
X_std = standardize.fit_transform(X)

normalize = MinMaxScaler()
X_norm = normalize.fit_transform(X_std)

# Model used fpr training on Iris and testing on other datasets
iris_linear_model = LinearRegression()
iris_linear_model.fit(X_norm,Y)

explainer = shap.Explainer(iris_linear_model, X_norm)
shap_values = explainer(X_norm)

shap.plots.waterfall(shap_values[0])

"""### **Both Std and Norm**"""

# Splitting the dataset in 70:30 ratio
X_iris_both_train, X_iris_both_test, y_iris_both_train, y_iris_both_test = train_test_split(X_norm, Y, test_size=0.3)

iris_linear_model_self = LinearRegression()
iris_linear_model_self.fit(X_iris_both_train, y_iris_both_train)
y_iris_both_pred = iris_linear_model_self.predict(X_iris_both_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_iris_both_test, y_iris_both_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_iris_both_test, y_iris_both_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_iris_both_test, y_iris_both_pred))))

# compute SHAP values
explainer = shap.Explainer(iris_linear_model_self, X_norm)
shap_values = explainer(X_norm)

shap.plots.bar(shap_values)



"""### **Standardization**"""

X_iris_std_train, X_iris_std_test, y_iris_std_train, y_iris_std_test = train_test_split(X_std, Y, test_size=0.3)

iris_linear_model_self.fit(X_iris_std_train, y_iris_std_train)
y_iris_std_pred = iris_linear_model_self.predict(X_iris_std_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_iris_std_test, y_iris_std_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_iris_std_test, y_iris_std_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_iris_std_test, y_iris_std_pred))))

"""### **Normalization**"""

X_iris_norm = normalize.fit_transform(X)

X_iris_norm_train, X_iris_norm_test, y_iris_norm_train, y_iris_norm_test = train_test_split(X_iris_norm, Y, test_size=0.3)

iris_linear_model_self.fit(X_iris_norm_train, y_iris_norm_train)
y_iris_norm_pred = iris_linear_model_self.predict(X_iris_norm_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_iris_norm_test, y_iris_norm_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_iris_norm_test, y_iris_norm_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_iris_norm_test, y_iris_norm_pred))))

"""### **Neither Std nor Norm**"""

X_iris_train, X_iris_test, y_iris_train, y_iris_test = train_test_split(X, Y, test_size=0.3)

iris_linear_model_self.fit(X_iris_train, y_iris_train)
y_iris_pred = iris_linear_model_self.predict(X_iris_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_iris_test, y_iris_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_iris_test, y_iris_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_iris_test, y_iris_pred))))

"""## **Palmer Penguin Dataset**"""

!pip install palmerpenguins

from palmerpenguins import load_penguins

palmer_dataset = load_penguins()
print(palmer_dataset)
# list(palmer_dataset.columns)

palmer_dataset.isnull().sum()

print(palmer_dataset['sex'].mode())

palmer_dataset['bill_length_mm'].fillna(value=palmer_dataset['bill_length_mm'].mean(), inplace=True)
palmer_dataset['bill_depth_mm'].fillna(value=palmer_dataset['bill_depth_mm'].mean(), inplace=True)
palmer_dataset['flipper_length_mm'].fillna(value=palmer_dataset['flipper_length_mm'].mean(), inplace=True)
palmer_dataset['body_mass_g'].fillna(value=palmer_dataset['body_mass_g'].mean(), inplace=True)
palmer_dataset['sex'].fillna('male', inplace=True)
palmer_dataset.isnull().sum()

print(palmer_dataset)

label_encoder_species = LabelEncoder()
palmer_dataset['species']= label_encoder_species.fit_transform(palmer_dataset['species'])
label_encoder_island = LabelEncoder()
palmer_dataset['island']= label_encoder_island.fit_transform(palmer_dataset['island'])
label_encoder_sex = LabelEncoder()
palmer_dataset['sex']= label_encoder_sex.fit_transform(palmer_dataset['sex'])

"""### **Correlation Heatmap**"""

# calculate the correlation matrix
corr = palmer_dataset.corr()
plt.figure(figsize=(12,10))
# plot the heatmap
sns.heatmap(corr, fmt='.2f',
        xticklabels=corr.columns,
        yticklabels=corr.columns, annot = True)

x_palmer_old_cols = ['island', 'bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'sex', 'year']
X_palmer_old = palmer_dataset[x_palmer_old_cols]
Y_palmer = palmer_dataset['species']

"""**Select K Best Features**"""

best_features_palmer = SelectKBest(f_classif, k=7)
select_fit_palmer = best_features_palmer.fit(X_palmer_old, Y_palmer)
dfscores = pd.DataFrame(select_fit_palmer.scores_)
dfcolumns = pd.DataFrame(X_palmer_old.columns)
#concat two dataframes for better visualization 
featureScores = pd.concat([dfcolumns,dfscores],axis=1)
featureScores.columns = ['Specs','Score']  #naming the dataframe columns
print(featureScores.nlargest(7,'Score'))

X_palmer_new_cols = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
X_palmer = palmer_dataset[X_palmer_new_cols]

X_palmer_std = standardize.fit_transform(X_palmer)

X_palmer_norm = normalize.fit_transform(X_palmer_std)

"""**Trained on Iris Tested on Palmer Penguin**"""

Y_palmer_pred = iris_linear_model.predict(X_palmer_norm)

"""### **Doing Regression and using Regression Metrics**"""

print("MAE : {0}".format(str(metrics.mean_absolute_error(Y_palmer, Y_palmer_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(Y_palmer, Y_palmer_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(Y_palmer, Y_palmer_pred))))

"""### **Doing Classification and using Regression Metrics**"""

# Rounding off the Predicted values to Integers
Y_palmer_pred_round = []
for value in Y_palmer_pred:
  Y_palmer_pred_round.append(round(value))

print("MAE : {0}".format(str(metrics.mean_absolute_error(Y_palmer, Y_palmer_pred_round))))
print("MSE : {0}".format(str(metrics.mean_squared_error(Y_palmer, Y_palmer_pred_round))))
print("R^2 : {0}".format(str(metrics.r2_score(Y_palmer, Y_palmer_pred_round))))

"""### **Doing Classification and using Classification Metrics**"""

# Converting the numbers to labels in order to classify
Y_palmer_pred_labels = label_encoder_species.inverse_transform(Y_palmer_pred_round)
Y_palmer_labels = label_encoder_species.inverse_transform(Y_palmer)

print("Accuracy : {0}".format(str(metrics.accuracy_score(Y_palmer_labels, Y_palmer_pred_labels))))
print("Precision, Recall, F1 Score, Support : {0}".format(str(metrics.precision_recall_fscore_support(Y_palmer_labels, Y_palmer_pred_labels, average = None))))

"""### **Using SHAP**"""

# compute SHAP values
explainer = shap.Explainer(iris_linear_model, X_palmer_norm)
shap_values = explainer(X_palmer_norm)

shap.plots.bar(shap_values)
# Feature 2 means Flipper_length_mm, this means both Select K-Best Feature and SHAP tells that this feature is the most influential in making the decision.

"""### **Training and Testing on Palmer Penguin Dataset**"""

palmer_linear_model = LinearRegression()
palmer_linear_model.fit(X_palmer_old, Y_palmer)

# compute SHAP values
explainer = shap.Explainer(palmer_linear_model, X_palmer_old)
shap_values = explainer(X_palmer_old)

shap.plots.bar(shap_values)

"""### **Neither Standardization nor Normalization**



"""

# Splitting the dataset in 70:30 ratio
X_palmer_train, X_palmer_test, y_palmer_train, y_palmer_test = train_test_split(X_palmer_old, Y_palmer, test_size=0.3)

palmer_linear_model_self = LinearRegression()
palmer_linear_model_self.fit(X_palmer_train, y_palmer_train)
y_palmer_self_pred = palmer_linear_model_self.predict(X_palmer_test)

# compute SHAP values
explainer = shap.Explainer(palmer_linear_model, X_palmer_old)
shap_values = explainer(X_palmer_old)

shap.plots.bar(shap_values)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_palmer_test, y_palmer_self_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_palmer_test, y_palmer_self_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_palmer_test, y_palmer_self_pred))))

"""### **Standardization**

"""

palmer_self_std = StandardScaler()
X_palmer_self_std = palmer_self_std.fit_transform(X_palmer_old)

# Splitting the dataset in 70:30 ratio
X_palmer_std_train, X_palmer_std_test, y_palmer_std_train, y_palmer_std_test = train_test_split(X_palmer_self_std, Y_palmer, test_size=0.3)

palmer_linear_model_self.fit(X_palmer_std_train, y_palmer_std_train)
y_palmer_self_std_pred = palmer_linear_model_self.predict(X_palmer_std_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_palmer_std_test, y_palmer_self_std_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_palmer_std_test, y_palmer_self_std_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_palmer_std_test, y_palmer_self_std_pred))))

"""### **Normalization**

"""

palmer_self_norm = MinMaxScaler()
X_palmer_self_norm = palmer_self_norm.fit_transform(X_palmer_old)

# Splitting the dataset in 70:30 ratio
X_palmer_norm_train, X_palmer_norm_test, y_palmer_norm_train, y_palmer_norm_test = train_test_split(X_palmer_self_norm, Y_palmer, test_size=0.3)

palmer_linear_model_self.fit(X_palmer_norm_train, y_palmer_norm_train)
y_palmer_self_norm_pred = palmer_linear_model_self.predict(X_palmer_norm_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_palmer_norm_test, y_palmer_self_norm_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_palmer_norm_test, y_palmer_self_norm_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_palmer_norm_test, y_palmer_self_norm_pred))))

"""### **Both Standardization and Normalization**

"""

X_palmer_self_std_norm = palmer_self_norm.fit_transform(X_palmer_self_std)

# Splitting the dataset in 70:30 ratio
X_palmer_std_norm_train, X_palmer_std_norm_test, y_palmer_std_norm_train, y_palmer_std_norm_test = train_test_split(X_palmer_self_std_norm, Y_palmer, test_size=0.3)

palmer_linear_model_self.fit(X_palmer_std_norm_train, y_palmer_std_norm_train)
y_palmer_self_std_norm_pred = palmer_linear_model_self.predict(X_palmer_std_norm_test)

print("MAE : {0}".format(str(metrics.mean_absolute_error(y_palmer_std_norm_test, y_palmer_self_std_norm_pred))))
print("MSE : {0}".format(str(metrics.mean_squared_error(y_palmer_std_norm_test, y_palmer_self_std_norm_pred))))
print("R^2 : {0}".format(str(metrics.r2_score(y_palmer_std_norm_test, y_palmer_self_std_norm_pred))))